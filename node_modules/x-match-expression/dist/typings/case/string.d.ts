import { BaseMapper, Case } from "./base";
export declare class StringCase<R> extends BaseMapper<R> implements Case<R> {
    readonly mapper: R | ((element: string) => R);
    constructor(mapper: R | ((element: string) => R));
    matches(element: any): boolean;
}
export declare class EmptyStringCase<R> extends BaseMapper<R> implements Case<R> {
    readonly mapper: R | ((element: string) => R);
    constructor(mapper: R | ((element: string) => R));
    matches(element: any): boolean;
}
export declare class StringLikeCase<R> implements Case<R> {
    readonly pattern: RegExp;
    readonly mapper: R | ((match: RegExpExecArray) => R);
    constructor(pattern: RegExp, mapper: R | ((match: RegExpExecArray) => R));
    matches(element: any): boolean;
    map(element: any): R;
}
