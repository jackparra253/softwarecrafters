import { BaseMapper, Case, Class, Instance } from "./base";
export declare class InstanceCase<T extends Class | Function, R> extends BaseMapper<R> implements Case<R> {
    readonly constructor: T;
    readonly mapper: R | ((element: Instance<T>) => R);
    constructor(constructor: T, mapper: R | ((element: Instance<T>) => R));
    matches(element: any): boolean;
}
export declare class ObjectCase<R> extends BaseMapper<R> implements Case<R> {
    readonly mapper: R | ((element: object) => R);
    constructor(mapper: R | ((element: object) => R));
    matches(element: any): boolean;
}
export declare class ObjectLikeCase<R, X> extends BaseMapper<R> implements Case<R> {
    readonly other: X;
    readonly mapper: R | ((element: X) => R);
    constructor(other: X, mapper: R | ((element: X) => R));
    matches(element: any): boolean;
    static isLike(element: any, other: any): boolean;
}
export declare class ObjectWithKeysCase<R, K extends Array<string>> extends BaseMapper<R> implements Case<R> {
    readonly keys: K;
    readonly mapper: R | ((element: Record<number, keyof K>) => R);
    constructor(keys: K, mapper: R | ((element: Record<number, keyof K>) => R));
    matches(element: any): boolean;
    static contains(element: any, keys: string[]): boolean;
}
export declare class NullCase<R> extends BaseMapper<R> implements Case<R> {
    readonly mapper: R | (() => R);
    constructor(mapper: R | (() => R));
    matches(element: any): boolean;
}
export declare class NotNullCase<E, R> extends BaseMapper<R> implements Case<R> {
    readonly mapper: R | ((element: E) => R);
    constructor(mapper: R | ((element: E) => R));
    matches(element: any): boolean;
}
