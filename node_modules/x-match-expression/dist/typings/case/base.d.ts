export interface Case<R> {
    matches(element: any): boolean;
    map(element: any): R;
}
export declare class IfCase<R> implements Case<R> {
    readonly testCase: Case<R>;
    readonly additionalTest: (element: any) => boolean;
    constructor(testCase: Case<R>, additionalTest: (element: any) => boolean);
    map(element: any): R;
    matches(element: any): boolean;
}
export declare class BaseMapper<R> {
    readonly mapper: any;
    constructor(mapper: any);
    map(element: any): R;
}
export interface Class {
    new (...args: any[]): any;
}
export declare type Instance<T> = T extends Class ? InstanceType<T> : any;
