import { BaseMapper, Case } from "./base";
export declare class NumberCase<R> extends BaseMapper<R> implements Case<R> {
    readonly mapper: R | ((element: number) => R);
    constructor(mapper: R | ((element: number) => R));
    matches(element: any): boolean;
}
export declare class NumberAlmostEqualCase<R> extends NumberCase<R> {
    readonly otherElement: number;
    readonly mapper: R | ((element: any) => R);
    readonly acceptedError: number;
    constructor(otherElement: number, mapper: R | ((element: any) => R), acceptedError?: number);
    matches(element: any): boolean;
    static almostEqual(a: number, b: number, acceptedError: number): boolean;
}
export declare class NumberGreaterCase<R> extends NumberCase<R> {
    readonly otherElement: number;
    readonly mapper: R | ((element: any) => R);
    constructor(otherElement: number, mapper: R | ((element: any) => R));
    matches(element: any): boolean;
}
export declare class NumberGreaterEqualCase<R> extends NumberCase<R> {
    readonly otherElement: number;
    readonly mapper: R | ((element: any) => R);
    constructor(otherElement: number, mapper: R | ((element: any) => R));
    matches(element: any): boolean;
}
export declare class NumberLessCase<R> extends NumberCase<R> {
    readonly otherElement: number;
    readonly mapper: R | ((element: any) => R);
    constructor(otherElement: number, mapper: R | ((element: any) => R));
    matches(element: any): boolean;
}
export declare class NumberLessEqualCase<R> extends NumberCase<R> {
    readonly otherElement: number;
    readonly mapper: R | ((element: any) => R);
    constructor(otherElement: number, mapper: R | ((element: any) => R));
    matches(element: any): boolean;
}
