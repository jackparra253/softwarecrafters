import { BaseMapper, Case } from "./base";
export declare class DateCase<R> extends BaseMapper<R> implements Case<R> {
    readonly mapper: R | ((element: any) => R);
    constructor(mapper: R | ((element: any) => R));
    matches(element: any): boolean;
}
export declare class DateOlderThanCase<R> extends BaseMapper<R> implements Case<R> {
    readonly other: Date;
    readonly mapper: R | ((element: Date) => R);
    constructor(other: Date, mapper: R | ((element: Date) => R));
    matches(element: any): boolean;
}
export declare class DateOlderEqualThanCase<R> extends BaseMapper<R> implements Case<R> {
    readonly other: Date;
    readonly mapper: R | ((element: Date) => R);
    constructor(other: Date, mapper: R | ((element: Date) => R));
    matches(element: any): boolean;
}
export declare class DateNewerThanCase<R> extends BaseMapper<R> implements Case<R> {
    readonly other: Date;
    readonly mapper: R | ((element: Date) => R);
    constructor(other: Date, mapper: R | ((element: Date) => R));
    matches(element: any): boolean;
}
export declare class DateNewerEqualThanCase<R> extends BaseMapper<R> implements Case<R> {
    readonly other: Date;
    readonly mapper: R | ((element: Date) => R);
    constructor(other: Date, mapper: R | ((element: Date) => R));
    matches(element: any): boolean;
}
