import { Class, Instance } from "./case/base";
import { Matcher } from "./matcher";
export declare class MatcherConstructor<E> {
    private readonly element;
    constructor(element: E);
    case<R>(test: (element: E) => boolean, mapper: R | ((element: E) => (R))): Matcher<E, R>;
    caseInstance<R, T extends Class | Function>(pattern: T, mapper: R | ((element: Instance<T>) => R)): Matcher<E, R>;
    caseInstanceIf<R, T extends Class | Function>(type: T, test: (element: Instance<T>) => boolean, mapper: R | ((element: Instance<T>) => (R))): Matcher<E, R>;
    caseTrue<R>(mapper: R | (() => R)): Matcher<E, R>;
    caseTrueIf<R>(test: () => boolean, mapper: R | (() => R)): Matcher<E, R>;
    caseFalse<R>(mapper: R | (() => R)): Matcher<E, R>;
    caseFalseIf<R>(test: () => boolean, mapper: R | (() => R)): Matcher<E, R>;
    caseBoolean<R>(mapper: R | ((element: boolean) => R)): Matcher<E, R>;
    caseBooleanIf<R>(test: (element: boolean) => boolean, mapper: R | ((element: boolean) => R)): Matcher<E, R>;
    caseEqual<R>(otherElement: E, mapper: R | ((element: E) => R)): Matcher<E, R>;
    caseEqualIf<R>(otherElement: E, test: (element: E) => boolean, mapper: R | ((element: E) => R)): Matcher<E, R>;
    caseNotEqual<R>(otherElement: E, mapper: R | ((element: E) => R)): Matcher<E, R>;
    caseNotEqualIf<R>(otherElement: E, test: (element: E) => boolean, mapper: R | ((element: E) => R)): Matcher<E, R>;
    caseNumber<R>(mapper: R | ((element: number) => R)): Matcher<E, R>;
    caseNumberIf<R>(test: (element: number) => boolean, mapper: R | ((element: number) => R)): Matcher<E, R>;
    caseAlmostEqual<R>(otherElement: number, mapper: R | ((element: number) => R), acceptedError?: number): Matcher<E, R>;
    caseAlmostEqualIf<R>(otherElement: number, test: (element: number) => boolean, mapper: R | ((element: number) => R), acceptedError?: number): Matcher<E, R>;
    caseGreaterThan<R>(otherElement: number, mapper: R | ((element: number) => R)): Matcher<E, R>;
    caseGreaterThanIf<R>(otherElement: number, test: (element: number) => boolean, mapper: R | ((element: number) => R)): Matcher<E, R>;
    caseGreaterEqualThan<R>(otherElement: number, mapper: R | ((element: number) => R)): Matcher<E, R>;
    caseGreaterEqualThanIf<R>(otherElement: number, test: (element: number) => boolean, mapper: R | ((element: number) => R)): Matcher<E, R>;
    caseLessThan<R>(otherElement: number, mapper: R | ((element: number) => R)): Matcher<E, R>;
    caseLessThanIf<R>(otherElement: number, test: (element: number) => boolean, mapper: R | ((element: number) => R)): Matcher<E, R>;
    caseLessEqualThan<R>(otherElement: number, mapper: R | ((element: number) => R)): Matcher<E, R>;
    caseLessEqualThanIf<R>(otherElement: number, test: (element: number) => boolean, mapper: R | ((element: number) => R)): Matcher<E, R>;
    caseNull<R>(mapper: R | (() => R)): Matcher<E, R>;
    caseNullIf<R>(test: () => boolean, mapper: R | (() => R)): Matcher<E, R>;
    caseNotNull<R>(mapper: R | ((element: E) => R)): Matcher<E, R>;
    caseNotNullIf<R>(test: (element: E) => boolean, mapper: R | ((element: E) => R)): Matcher<E, R>;
    caseObject<R>(mapper: R | ((element: object) => R)): Matcher<E, R>;
    caseObjectIf<R>(test: (element: object) => boolean, mapper: R | ((element: object) => R)): Matcher<E, R>;
    caseObjectLike<R, O extends object>(other: O, mapper: R | ((element: O) => R)): Matcher<E, R>;
    caseObjectLikeIf<R, O extends object>(other: O, test: (element: O) => boolean, mapper: R | ((element: O) => R)): Matcher<E, R>;
    caseObjectWithKeys<R, K extends Array<string>>(keys: K, mapper: R | ((element: Record<number, keyof K>) => R)): Matcher<E, R>;
    caseObjectWithKeysIf<R, K extends Array<string>>(keys: K, test: (element: object) => boolean, mapper: R | ((element: Record<number, keyof K>) => R)): Matcher<E, R>;
    caseString<R>(mapper: R | ((element: string) => R)): Matcher<E, R>;
    caseStringIf<R>(test: (element: string) => boolean, mapper: R | ((element: string) => R)): Matcher<E, R>;
    caseStringLike<R>(exp: RegExp, mapper: R | ((element: RegExpExecArray) => R)): Matcher<E, R>;
    caseStringLikeIf<R>(exp: RegExp, test: (element: string) => boolean, mapper: R | ((element: RegExpExecArray) => R)): Matcher<E, R>;
    caseEmptyString<R>(mapper: R | ((element: string) => R)): Matcher<E, R>;
    caseEmptyStringIf<R>(test: () => boolean, mapper: R | ((element: string) => R)): Matcher<E, R>;
    caseDate<R>(mapper: R | ((element: Date) => R)): Matcher<E, R>;
    caseDateIf<R>(test: (element: Date) => boolean, mapper: R | ((element: Date) => R)): Matcher<E, R>;
    caseOlderThan<R>(other: Date, mapper: R | ((element: Date) => R)): Matcher<E, R>;
    caseOlderThanIf<R>(other: Date, test: (element: Date) => boolean, mapper: R | ((element: Date) => R)): Matcher<E, R>;
    caseOlderEqualThan<R>(other: Date, mapper: R | ((element: Date) => R)): Matcher<E, R>;
    caseOlderEqualThanIf<R>(other: Date, test: (element: Date) => boolean, mapper: R | ((element: Date) => R)): Matcher<E, R>;
    caseNewerThan<R>(other: Date, mapper: R | ((element: Date) => R)): Matcher<E, R>;
    caseNewerThanIf<R>(other: Date, test: (element: Date) => boolean, mapper: R | ((element: Date) => R)): Matcher<E, R>;
    caseNewerEqualThan<R>(other: Date, mapper: R | ((element: Date) => R)): Matcher<E, R>;
    caseNewerEqualThanIf<R>(other: Date, test: (element: Date) => boolean, mapper: R | ((element: Date) => R)): Matcher<E, R>;
    caseArray<R>(mapper: R | ((element: Array<any>) => R)): Matcher<E, R>;
    caseArrayIf<R>(test: (element: Array<any>) => boolean, mapper: R | ((element: Array<any>) => R)): Matcher<E, R>;
    caseEmptyArray<R>(mapper: R | ((element: Array<any>) => R)): Matcher<E, R>;
    caseEmptyArrayIf<R>(test: () => boolean, mapper: R | ((element: Array<any>) => R)): Matcher<E, R>;
}
