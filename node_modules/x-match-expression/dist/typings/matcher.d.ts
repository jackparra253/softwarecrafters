import { Case, Class, Instance } from "./case/base";
export declare class Matcher<E, R> {
    private readonly element;
    private readonly cases;
    constructor(element: E, cases: Case<R>[]);
    case<R2>(test: (element: E) => boolean, mapper: R2 | ((element: E) => (R2))): Matcher<E, R | R2>;
    caseInstance<T extends Class | Function, R2>(constructor: T, mapper: R2 | ((element: Instance<T>) => R2)): Matcher<E, R | R2>;
    caseInstanceIf<T extends Class | Function, R2>(type: T, test: (element: Instance<T>) => boolean, mapper: R2 | ((element: Instance<T>) => (R2))): Matcher<E, R | R2>;
    caseTrue<R2>(mapper: R2 | (() => R2)): Matcher<E, R | R2>;
    caseTrueIf<R2>(test: () => boolean, mapper: R2 | (() => R2)): Matcher<E, R | R2>;
    caseFalse<R2>(mapper: R2 | (() => R2)): Matcher<E, R | R2>;
    caseFalseIf<R2>(test: () => boolean, mapper: R2 | (() => R2)): Matcher<E, R | R2>;
    caseBoolean<R2>(mapper: R2 | ((element: boolean) => R2)): Matcher<E, R | R2>;
    caseBooleanIf<R2>(test: (element: boolean) => boolean, mapper: R2 | ((element: boolean) => R2)): Matcher<E, R | R2>;
    caseEqual<R2>(otherElement: E, mapper: R2 | ((element: E) => R2)): Matcher<E, R | R2>;
    caseEqualIf<R2>(otherElement: E, test: (element: E) => boolean, mapper: R2 | ((element: E) => R2)): Matcher<E, R | R2>;
    caseNotEqual<R2>(otherElement: E, mapper: R2 | ((element: E) => R2)): Matcher<E, R | R2>;
    caseNotEqualIf<R2>(otherElement: E, test: (element: E) => boolean, mapper: R2 | ((element: E) => R2)): Matcher<E, R | R2>;
    caseNumber<R2>(mapper: R2 | ((element: number) => R2)): Matcher<E, R | R2>;
    caseNumberIf<R2>(test: (element: number) => boolean, mapper: R2 | ((element: number) => R2)): Matcher<E, R | R2>;
    caseAlmostEqual<R2>(otherElement: number, mapper: R2 | ((element: number) => R2), acceptedError?: number): Matcher<E, R | R2>;
    caseAlmostEqualIf<R2>(otherElement: number, test: (element: number) => boolean, mapper: R2 | ((element: number) => R2), acceptedError?: number): Matcher<E, R | R2>;
    caseGreaterThan<R2>(otherElement: number, mapper: R2 | ((element: number) => R2)): Matcher<E, R | R2>;
    caseGreaterThanIf<R2>(otherElement: number, test: (element: number) => boolean, mapper: R2 | ((element: number) => R2)): Matcher<E, R | R2>;
    caseGreaterEqualThan<R2>(otherElement: number, mapper: R2 | ((element: number) => R2)): Matcher<E, R | R2>;
    caseGreaterEqualThanIf<R2>(otherElement: number, test: (element: number) => boolean, mapper: R2 | ((element: number) => R2)): Matcher<E, R | R2>;
    caseLessThan<R2>(otherElement: number, mapper: R2 | ((element: number) => R2)): Matcher<E, R | R2>;
    caseLessThanIf<R2>(otherElement: number, test: (element: number) => boolean, mapper: R2 | ((element: number) => R2)): Matcher<E, R | R2>;
    caseLessEqualThan<R2>(otherElement: number, mapper: R2 | ((element: number) => R2)): Matcher<E, R | R2>;
    caseLessEqualThanIf<R2>(otherElement: number, test: (element: number) => boolean, mapper: R2 | ((element: number) => R2)): Matcher<E, R | R2>;
    caseNull<R2>(mapper: R2 | (() => R2)): Matcher<E, R | R2>;
    caseNullIf<R2>(test: () => boolean, mapper: R2 | (() => R2)): Matcher<E, R | R2>;
    caseNotNull<R2>(mapper: R2 | ((element: E) => R2)): Matcher<E, R | R2>;
    caseNotNullIf<R2>(test: (element: E) => boolean, mapper: R2 | ((element: E) => R2)): Matcher<E, R | R2>;
    caseObject<R2>(mapper: R2 | ((element: object) => R2)): Matcher<E, R | R2>;
    caseObjectIf<R2>(test: (element: object) => boolean, mapper: R2 | ((element: object) => R2)): Matcher<E, R | R2>;
    caseObjectLike<O extends object, R2>(other: O, mapper: R2 | ((element: O) => R2)): Matcher<E, R | R2>;
    caseObjectLikeIf<O extends object, R2>(other: O, test: (element: O) => boolean, mapper: R2 | ((element: O) => R2)): Matcher<E, R | R2>;
    caseObjectWithKeys<K extends Array<string>, R2>(keys: K, mapper: R2 | ((element: Record<number, keyof K>) => R2)): Matcher<E, R | R2>;
    caseObjectWithKeysIf<K extends Array<string>, R2>(keys: K, test: (element: object) => boolean, mapper: R2 | ((element: Record<number, keyof K>) => R2)): Matcher<E, R | R2>;
    caseString<R2>(mapper: R2 | ((element: string) => R2)): Matcher<E, R | R2>;
    caseStringIf<R2>(test: (element: string) => boolean, mapper: R2 | ((element: string) => R2)): Matcher<E, R | R2>;
    caseStringLike<R2>(exp: RegExp, mapper: R2 | ((element: RegExpExecArray) => R2)): Matcher<E, R | R2>;
    caseStringLikeIf<R2>(exp: RegExp, test: (element: string) => boolean, mapper: R2 | ((element: RegExpExecArray) => R2)): Matcher<E, R | R2>;
    caseEmptyString<R2>(mapper: R2 | ((element: string) => R2)): Matcher<E, R | R2>;
    caseEmptyStringIf<R2>(test: () => boolean, mapper: R2 | ((element: string) => R2)): Matcher<E, R | R2>;
    caseDate<R2>(mapper: R2 | ((element: Date) => R2)): Matcher<E, R | R2>;
    caseDateIf<R2>(test: (element: Date) => boolean, mapper: R2 | ((element: Date) => R2)): Matcher<E, R | R2>;
    caseOlderThan<R2>(other: Date, mapper: R2 | ((element: Date) => R2)): Matcher<E, R | R2>;
    caseOlderThanIf<R2>(other: Date, test: (element: Date) => boolean, mapper: R2 | ((element: Date) => R2)): Matcher<E, R | R2>;
    caseOlderEqualThan<R2>(other: Date, mapper: R2 | ((element: Date) => R2)): Matcher<E, R | R2>;
    caseOlderEqualThanIf<R2>(other: Date, test: (element: Date) => boolean, mapper: R2 | ((element: Date) => R2)): Matcher<E, R | R2>;
    caseNewerThan<R2>(other: Date, mapper: R2 | ((element: Date) => R2)): Matcher<E, R | R2>;
    caseNewerThanIf<R2>(other: Date, test: (element: Date) => boolean, mapper: R2 | ((element: Date) => R2)): Matcher<E, R | R2>;
    caseNewerEqualThan<R2>(other: Date, mapper: R2 | ((element: Date) => R2)): Matcher<E, R | R2>;
    caseNewerEqualThanIf<R2>(other: Date, test: (element: Date) => boolean, mapper: R2 | ((element: Date) => R2)): Matcher<E, R | R2>;
    caseArray<R2>(mapper: R2 | ((element: Array<any>) => R2)): Matcher<E, R | R2>;
    caseArrayIf<R2>(test: (element: Array<any>) => boolean, mapper: R2 | ((element: Array<any>) => R2)): Matcher<E, R | R2>;
    caseEmptyArray<R2>(mapper: R2 | ((element: Array<any>) => R2)): Matcher<E, R | R2>;
    caseEmptyArrayIf<R2>(test: (element: Array<any>) => boolean, mapper: R2 | ((element: Array<any>) => R2)): Matcher<E, R | R2>;
    default<R2>(mapper: R2 | ((element: any) => R2)): R | R2;
}
